@page "/check-details/{id:int}"
@inject IBatchService _BatchService
@inject ISnackbar _Snackbar
@inject NavigationManager _NavManager

<PageTitle>Batch Details</PageTitle>
<MudText Typo="Typo.h4" Class="mt-5 mb-10">Batch Detail Summary</MudText>


<MudDataGrid T="Payment" MultiSelection="true" Items="@_Payments" FooterClass="d-none"
    SortMode="SortMode.Single" Filterable="true" QuickFilter="@_quickFilter" Elevation="3">
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.ClaimTransactionId"/>
        <PropertyColumn Property="x => x.Payee" />
        <PropertyColumn Property="x => x.Address" Sortable="true"/>
        <SelectColumn ShowInFooter="false" T="Payment"/>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Payment"/>
    </PagerContent>
</MudDataGrid>

<MudStack Row Class="mt-10 justify-end gap-x-10">
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ArrowBack" OnClick="@(() => _NavManager.NavigateTo("/", false))">Back</MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Print" OnClick="@(async () => await ReprintChecks())">Reprint</MudButton>
</MudStack>

 @code {
    [Parameter]
    public int Id { get; set; }
    private IList<Payment> _Payments = [];
    private string? _searchString;

    private Func<Payment, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.ClaimTransactionId.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Payee.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.Address.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        _Payments = await _BatchService.GetPaymentsAsync();
    }

    private async Task ReprintChecks()
    {
        await Task.Delay(2000);
        _Snackbar.Add("Checks have been sent to the print queue", Severity.Success);
    }
}